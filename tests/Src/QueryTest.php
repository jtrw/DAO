<?php

namespace Jtrw\DAO\Tests\Src;

use Jtrw\DAO\DataAccessObjectInterface;
use Jtrw\DAO\Exceptions\DatabaseException;
use Jtrw\DAO\Query\Query;
use Jtrw\DAO\Tests\DbConnector;
use PHPUnit\Framework\TestCase;
use PHPUnit\Framework\Assert;

class QueryTest extends TestCase
{
    private const TABLE_SETTINGS = "settings";
    
    private DataAccessObjectInterface $db;
    
    /**
     * @return void
     */
    public function setUp(): void
    {
        $this->db = DbConnector::getInstance();
        parent::setUp(); // TODO: Change the autogenerated stub
    }
    
    /**
     * @return void
     */
    public function testFetch()
    {
        $query = new Query($this->db);
        
        $values = [
            'id_parent' => 0,
            'caption'   => 'testQuery',
            'value'     => 'dataTestQuery'
        ];
        
        $id = $this->createItem($values);
        $result = $query->select("caption")
            ->table(static::TABLE_SETTINGS)
            ->where(['id' => $id])
            ->fetch();
        
        Assert::assertEquals($result['caption'], $values['caption']);
    }
    
    /**
     * @return void
     */
    public function testFetchAll()
    {
        $query = new Query($this->db);
        
        $values = $this->createItems();
        
        $result = $query->select("caption")
            ->select("id")
            ->select("COUNT(id)", "count")
            ->table(static::TABLE_SETTINGS)
            ->where(['id&>' => 0])
            ->groupBy("id")
            ->orderBy("id DESC")
            ->having(["COUNT(id)&>" => 0])
            ->fetchAll();
        
        
        
        Assert::assertEquals($result[0]['id'], $values[1]['id']);
        Assert::assertEquals($result[1]['id'], $values[0]['id']);
    }
    
    /**
     * @return void
     */
    public function testLimitFetchAlll()
    {
        $query = new Query($this->db);
        
        $values = [
            'id_parent' => 0,
            'caption'   => 'testQueryLimit',
            'value'     => 'dataTestQueryLimit'
        ];
        
        $this->createItem($values);
        
        $result = $query->select("caption")
            ->table(static::TABLE_SETTINGS)
            ->limit(2, 0)
            ->orderBy("id DESC")
            ->fetchAll();
        
        Assert::assertCount(2, $result);
        
        Assert::assertEquals($result[0]['caption'], $values['caption']);
    }
    
    /**
     * @return void
     */
    public function testJoin()
    {
        $query = new Query($this->db);
    
        $values = [
            'id_parent' => 0,
            'caption'   => 'testJoinParent',
            'value'     => 'dataJoinTest'
        ];
    
        $id = $this->createItem($values);
        
        $values = [
            'id_parent' => $id,
            'caption'   => 'testJoin',
            'value'     => 'dataJoinTest'
        ];
    
        $this->createItem($values);
        
        $result = $query->select("s2.caption")
            ->table(static::TABLE_SETTINGS)
            ->join("INNER JOIN ".static::TABLE_SETTINGS." as s2 ON settings.id = s2.id_parent")
            ->orderBy("s2.id DESC")
            ->fetchAll();
    
        Assert::assertEquals($result[0]['caption'], $values['caption']);
    }
    
    /**
     * @return void
     */
    public function testJoins()
    {
        $query = new Query($this->db);
        
        $values = [
            'id_parent' => 0,
            'caption'   => 'testJoinsParent',
            'value'     => 'dataJoinsTest'
        ];
        
        $id = $this->createItem($values);
        
        $values = [
            'id_parent' => $id,
            'caption'   => 'testJoins',
            'value'     => 'dataJoinTest'
        ];
        
        $this->createItem($values);
        
        $result = $query->select("s2.caption")
            ->table(static::TABLE_SETTINGS)
            ->joins(["INNER JOIN ".static::TABLE_SETTINGS." as s2 ON settings.id = s2.id_parent"])
            ->orderBy("s2.id DESC")
            ->fetchAll();
        
        Assert::assertEquals($result[0]['caption'], $values['caption']);
    }
    
    /**
     * @return void
     */
    public function testTableNotFound()
    {
        $query = new Query($this->db);
        try {
            $query->select("caption")->fetch();
            $this->fail('DatabaseException was not thrown');
        } catch (DatabaseException $exp) {
            $this->assertSame(
                [
                    'Table Not Found From Query',
                ],
                [$exp->getMessage()]
            );
        }
    }
    
    /**
     * @return array|array[]
     */
    private function createItems(): array
    {
        $values = [
            [
                'id_parent' => 0,
                'caption'   => 'on1',
                'value'     => 'dataOne1'
            ],
            [
                'id_parent' => 0,
                'caption'   => 'on2',
                'value'     => 'dataOne2'
            ]
        ];
        foreach ($values as $key => $value) {
            $values[$key]['id'] = $this->createItem($value);
        }
        
        return $values;
    }
    
    /**
     * @param array $values
     * @return int
     */
    private function createItem(array $values): int
    {
        $idSetting = $this->db->insert(static::TABLE_SETTINGS, $values);
        Assert::assertIsInt($idSetting);
        return $idSetting;
    }
}