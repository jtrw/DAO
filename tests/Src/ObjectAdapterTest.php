<?php

namespace Jtrw\DAO\Tests\Src;

use Jtrw\DAO\DataAccessObjectInterface;
use Jtrw\DAO\Tests\DbConnector;
use Jtrw\DAO\ValueObject\ValueObjectInterface;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;

class ObjectAdapterTest extends TestCase
{
    private const TABLE_SETTINGS = "settings";
    
    private DataAccessObjectInterface $db;
    
    public function setUp(): void
    {
        $this->db = DbConnector::getInstance();
        parent::setUp(); // TODO: Change the autogenerated stub
    }
    
    public function testCurrentDate()
    {
        $sql = "SELECT CURRENT_DATE";
        $date = $this->db->select($sql, [], [], DataAccessObjectInterface::FETCH_ONE)->toNative();

        Assert::assertEquals($date, date("Y-m-d"));
    }
    
    public function testInsert()
    {
        $values = [
            'id_parent' => 0,
            'caption'   => 'test',
            'value'     => 'dataTest'
        ];
        $idSetting = $this->db->insert(static::TABLE_SETTINGS, $values);
        Assert::assertIsInt($idSetting);
        
        $sql = "SELECT * FROM settings";
        $search = [
            'id' => $idSetting
        ];
        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ROW);
        Assert::assertInstanceOf(ValueObjectInterface::class, $result);
        
        $resultData = $result->toNative();
        Assert::assertNotEmpty($resultData);
        Assert::assertEquals($values['value'], $resultData['value']);
    }
    
    public function testMassInsert()
    {
        $values = [
            [
                'id_parent' => 0,
                'caption'   => 'massTest1',
                'value'     => 'dataMassTest1'
            ],
            [
                'id_parent' => 0,
                'caption'   => 'massTest2',
                'value'     => 'dataMassTest2'
            ]
            
        ];
        $this->db->massInsert(static::TABLE_SETTINGS, $values);
        
        $sql = "SELECT * FROM ".static::TABLE_SETTINGS;
        $search = [
            'caption' => $values[1]['caption']
        ];
        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ROW);
        Assert::assertInstanceOf(ValueObjectInterface::class, $result);
        
        $resultData = $result->toNative();
        Assert::assertNotEmpty($resultData);
        Assert::assertEquals($values[1]['value'], $resultData['value']);
    }
    
    public function testMassInsertInForeach()
    {
        $values = [
            [
                'id_parent' => 0,
                'caption'   => 'massTest3',
                'value'     => 'dataMassTest3'
            ],
            [
                'id_parent' => 0,
                'caption'   => 'massTest4',
                'value'     => 'dataMassTest4'
            ]
        
        ];
        $this->db->massInsert(static::TABLE_SETTINGS, $values, true);
        
        $sql = "SELECT * FROM ".static::TABLE_SETTINGS;
        $search = [
            'caption' => $values[1]['caption']
        ];
        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ROW);
        Assert::assertInstanceOf(ValueObjectInterface::class, $result);
        
        $resultData = $result->toNative();
        Assert::assertNotEmpty($resultData);
        Assert::assertEquals($values[1]['value'], $resultData['value']);
    }
    
    public function testUpdate()
    {
        $sql = "SELECT * FROM ".static::TABLE_SETTINGS;
        
        $result = $this->db->select($sql, [], [], DataAccessObjectInterface::FETCH_ALL);
        Assert::assertInstanceOf(ValueObjectInterface::class, $result);
    
        $resultData = $result->toNative();
        Assert::assertNotEmpty($resultData[0]);
        $currentValue = $resultData[0];
        
        $values = [
            'value' => "NewValueWithTimeStamp".time()
        ];
        
        $search = [
            'id' => $currentValue['id']
        ];
        
        $result = $this->db->update(static::TABLE_SETTINGS, $values, $search);
        Assert::assertIsInt($result);
    
        $sql = "SELECT * FROM settings";

        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ROW);
        Assert::assertInstanceOf(ValueObjectInterface::class, $result);
    
        $resultData = $result->toNative();
        Assert::assertNotEmpty($resultData);
        Assert::assertEquals($resultData['value'], $values['value']);
    }
}